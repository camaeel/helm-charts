fullnameOverride: null
nameOverride: null

instances: 2

# Example of rolling update strategy:
# - unsupervised: automated update of the primary once all
#                 replicas have been upgraded (default)
# - supervised: requires manual supervision to perform
#               the switchover of the primary
primaryUpdateStrategy: unsupervised

minSyncReplicas: null
maxSyncReplicas: null

# creates secret containing superuser password
enableSuperuserAccess: false

# set image name to exact version
imageName: null

storage:
  size: 1M
  storageClass: null

# resource limits & requests
resources: {}

#backup configuration (reference: https://cloudnative-pg.io/documentation/1.22/cloudnative-pg.v1/#postgresql-cnpg-io-v1-BackupConfiguration)
backup: {}
## example backup definition using objectStore
#  barmanObjectStore:
#    destinationPath: s3://example-postgres-backup/
#    s3Credentials:
#      inheritFromIAMRole: false
#      accessKeyId:
#        name: SECRET_CONTAINING_AWS_CREDS
#        key: access_key
#      secretAccessKey:
#        name:SECRET_CONTAINING_AWS_CREDS
#        key: secret_key
#      sessionToken:
#        name: SECRET_CONTAINING_AWS_CREDS
#        key: security_token
#    wal:
#      compression: gzip
#      maxParallel: 2
# schedule backup configuration
scheduleBackups: []
#   name suffix
# - name: daily
#   cron expression
#   schedule: "0 1 * * *"
#   backup method. By default barmanObjectStore
#   method: barmanObjectStore


# External secrets Operator provided secrets
eso:
  # enable support for AWS secret dynamically generated by ESO
  enabled: false
  # database backup creds access
  databaseBackup:
    # should point to vault server
    # vaultUrl: "https://vault.vault.svc.cluster.local:8200"
    # credentials path in vault. For example /aws/creds/cnpg-backup
    # credsPath: ""
    # refresh interval. Should be lower than credentials TTL, because ESO is not aware of vault secret's TTL
    refreshInterval: 30m
    # TTL of the generated secret
    ttl: 60m
    # auth for ESO
    auth:
      mountPath: kubernetes
      # role under mountPath used for authentication
      # role: cnpg-postgres-backup

bootstrap:
  # initialization of db: https://cloudnative-pg.io/documentation/1.22/cloudnative-pg.v1/#postgresql-cnpg-io-v1-BootstrapInitDB
#  initdb: {}
  # database: app
  # owner: appuser
  # secret: some-secret # secret that contains pregenerated password
  recovery: null
    # default source for recovery - points to S3 bucket
    # source: s3Backup
    # recoveryTarget:
      # Point-in-time recovery
      # targetTime: "2023-08-11 11:14:21.00000+02"
    # Recovery from named backup
    # backup:
    #   name: backup-example
externalClusters: []
#  - name: s3Backup
#    barmanObjectStore:
#      destinationPath: s3://example-postgres-backup/
#      s3Credentials:
#        inheritFromIAMRole: false
#        accessKeyId:
#          name: SECRET_CONTAINING_AWS_CREDS
#          key: access_key
#        secretAccessKey:
#          name:SECRET_CONTAINING_AWS_CREDS
#          key: secret_key
#        sessionToken:
#          name: SECRET_CONTAINING_AWS_CREDS
#          key: security_token
#      wal:
#        compression: gzip
#        maxParallel: 2

logicalBackup:
  enabled: false
  schedule: "30 */3 * * *"
  ttlSecondsAfterFinished: 14400
  image:
    pgdump:
      registry: postgres
      tag: 16
    awscli:
      registry: public.ecr.aws/aws-cli/aws-cli
      tag: latest
    encrypt:
      registry: alpine
      tag: latest
  databases: []
#   - app
#  bucket: example-app-backups
  # encrypt - encrypt before uploading to cloud
  encrypt:
    enabled: false
#    agePublicKey: "xxxx"
  securityContext:
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: 1000
    capabilities:
      drop:
        - ALL
    seccompProfile:
      type: RuntimeDefault
